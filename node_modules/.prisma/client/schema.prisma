generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  surname   String
  email     String   @unique
  password  String
  role      UserRole @default(CLIENT)
  isStudent Boolean  @default(false)
  createdAt DateTime @default(now())

  applications   Application[]
  studentProfile StudentProfile?
}

model NewsImage {
  id               Int      @id @default(autoincrement())
  url              String
  socialUrl        String?
  mobileSocialUrl  String?
  desktopSocialUrl String?
  isMain           Boolean  @default(false)
  order            Int      @default(0)
  newsId           Int
  news             News     @relation(fields: [newsId], references: [id])
  createdAt        DateTime @default(now())
}

model News {
  id        Int         @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime    @default(now())
  imageUrl  String? // We keep this to not cause breaking changes with the new image implementation
  images    NewsImage[]
}

// model Application {
//   id            Int      @id @default(autoincrement())
//   userId    Int?
//   name          String
//   surname       String
//   email         String   @unique
//   createdAt     DateTime @default(now())
//   type          TrainingType

//   user      User?     @relation(fields: [userId], references: [id])
// }

enum TrainingType {
  INFORMATION_SCIENCE
  AGROBUSINESS
  ACCOUNTING
  MARKETING
}

model Application {
  id          Int          @id @default(autoincrement())
  userId      Int?
  name        String
  surname     String
  email       String
  phoneNumber String?
  createdAt   DateTime     @default(now())
  type        TrainingType

  user User? @relation(fields: [userId], references: [id])

  @@unique([email, type])
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

model JobListing {
  id           Int      @id @default(autoincrement())
  title        String
  company      String
  location     String
  type         JobType
  salary       String
  description  String   @db.Text
  requirements String[] @default([])
  posted       DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
}

enum TeamMemberRole {
  EXECUTIVE_DIRECTOR // Drejtor ekzekutiv
  MEETING_COORDINATOR // Koordinator i takimeve
  BOARD_MEMBER // Pjestar i bordit
  PRESIDENT // President
}

model TeamMember {
  id          Int            @id @default(autoincrement())
  fullName    String
  role        TeamMemberRole
  description String
  title       String
  imagePath   String
  email       String?
  phoneNumber String?
  cvPath      String?
  linkedinUrl String?
  twitterUrl  String?
  facebookUrl String?
  createdAt   DateTime       @default(now())
}

enum CourseType {
  INFORMATION_SCIENCE
  AGROBUSINESS
  ACCOUNTING
  MARKETING
}

model FeaturedStudent {
  id             Int        @id @default(autoincrement())
  name           String
  surname        String
  email          String     @unique
  phoneNumber    String?
  courseType     CourseType
  score          Int
  imagePath      String?
  description    String     @db.Text
  achievements   String[]
  graduationDate DateTime
  isActive       Boolean    @default(true)
  linkedinUrl    String?
  testimonial    String?    @db.Text
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  studentProfileId Int?             @unique
  studentProfile   StudentProfile?  @relation(fields: [studentProfileId], references: [id])
  trainingReviews  TrainingReview[]
}

model Training {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?  @db.Text
  category        String
  level           String
  instructor      String
  totalHours      Int
  startDate       DateTime
  endDate         DateTime
  maxParticipants Int?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  enrollments StudentTrainingEnrollment[]
  reviews     TrainingReview[]
}

model StudentTrainingEnrollment {
  id             Int            @id @default(autoincrement())
  trainingId     Int
  profileId      Int
  enrollmentDate DateTime       @default(now())
  status         TrainingStatus // ENROLLED, IN_PROGRESS, COMPLETED, DROPPED
  progress       Int            @default(0) // 0-100
  completionDate DateTime?
  certificateUrl String?
  attendance     Int            @default(0) // Track attendance percentage
  grade          Float? // Optional final grade
  feedback       String?        @db.Text // Admin/Instructor feedback

  // Relations
  training Training       @relation(fields: [trainingId], references: [id])
  profile  StudentProfile @relation(fields: [profileId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trainingId, profileId]) // Prevent duplicate enrollments
}

enum TrainingStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  DROPPED
}

model StudentProfile {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  university   String?
  faculty      String?
  year         String?
  gpa          Float?
  bio          String? @db.Text
  location     String?
  phoneNumber  String?
  linkedinUrl  String?
  facebookUrl  String?
  githubUrl    String?
  portfolioUrl String?
  profileImage String?
  cvPath       String?
  attendance   Float?  @default(0)
  totalCredits Int?    @default(0)

  user             User                        @relation(fields: [userId], references: [id])
  skills           StudentSkill[]
  badges           StudentBadge[]
  trainings        StudentTrainingEnrollment[]
  testimonials     StudentTestimonial[]
  academicSubjects StudentSubject[]
  featuredStudent  FeaturedStudent?
  trainingReviews  TrainingReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  StudentTraining StudentTraining[]
}

model StudentSkill {
  id        Int            @id @default(autoincrement())
  name      String
  level     Int // 0-100
  profileId Int
  profile   StudentProfile @relation(fields: [profileId], references: [id])
}

model StudentBadge {
  id        Int            @id @default(autoincrement())
  name      String
  type      String // achievement, consistency, competition, leadership
  date      DateTime
  profileId Int
  profile   StudentProfile @relation(fields: [profileId], references: [id])
}

model StudentTraining {
  id             Int            @id @default(autoincrement())
  title          String
  category       String
  level          String // Beginner, Intermediate, Advanced
  instructor     String
  hours          Int?
  completionDate DateTime?
  startDate      DateTime?
  status         String // completed, ongoing, upcoming
  progress       Int? // 0-100 for ongoing trainings
  certificate    Boolean        @default(false)
  profileId      Int
  profile        StudentProfile @relation(fields: [profileId], references: [id])
}

model StudentTestimonial {
  id        Int            @id @default(autoincrement())
  author    String
  role      String
  content   String         @db.Text
  rating    Int // 1-5
  date      DateTime       @default(now())
  profileId Int
  profile   StudentProfile @relation(fields: [profileId], references: [id])
}

model StudentSubject {
  id        Int            @id @default(autoincrement())
  name      String
  grade     String
  credits   Int
  semester  String
  profileId Int
  profile   StudentProfile @relation(fields: [profileId], references: [id])
}

model TrainingReview {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  rating    Int // 1-5 rating
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trainingId       Int
  training         Training       @relation(fields: [trainingId], references: [id])
  studentProfileId Int
  studentProfile   StudentProfile @relation(fields: [studentProfileId], references: [id])

  featuredStudentId Int?
  featuredStudent   FeaturedStudent? @relation(fields: [featuredStudentId], references: [id])

  @@unique([trainingId, studentProfileId])
}
