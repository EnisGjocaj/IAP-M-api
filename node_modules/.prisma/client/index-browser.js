
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.19.1
 * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
 */
Prisma.prismaVersion = {
  client: "5.19.1",
  engine: "69d742ee20b815d88e17e54db4a2a7a3b30324e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surname: 'surname',
  email: 'email',
  password: 'password',
  role: 'role',
  isStudent: 'isStudent',
  createdAt: 'createdAt'
};

exports.Prisma.NewsImageScalarFieldEnum = {
  id: 'id',
  newsId: 'newsId',
  url: 'url',
  socialUrl: 'socialUrl',
  isMain: 'isMain',
  order: 'order',
  createdAt: 'createdAt'
};

exports.Prisma.NewsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  imageUrl: 'imageUrl'
};

exports.Prisma.ApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  surname: 'surname',
  email: 'email',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt',
  type: 'type'
};

exports.Prisma.JobListingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  company: 'company',
  location: 'location',
  type: 'type',
  salary: 'salary',
  description: 'description',
  requirements: 'requirements',
  posted: 'posted',
  updatedAt: 'updatedAt',
  isActive: 'isActive'
};

exports.Prisma.TeamMemberScalarFieldEnum = {
  id: 'id',
  fullName: 'fullName',
  role: 'role',
  description: 'description',
  title: 'title',
  imagePath: 'imagePath',
  email: 'email',
  phoneNumber: 'phoneNumber',
  cvPath: 'cvPath',
  linkedinUrl: 'linkedinUrl',
  twitterUrl: 'twitterUrl',
  facebookUrl: 'facebookUrl',
  createdAt: 'createdAt'
};

exports.Prisma.FeaturedStudentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  surname: 'surname',
  email: 'email',
  phoneNumber: 'phoneNumber',
  courseType: 'courseType',
  score: 'score',
  imagePath: 'imagePath',
  description: 'description',
  achievements: 'achievements',
  graduationDate: 'graduationDate',
  isActive: 'isActive',
  linkedinUrl: 'linkedinUrl',
  testimonial: 'testimonial',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  studentProfileId: 'studentProfileId'
};

exports.Prisma.TrainingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  category: 'category',
  level: 'level',
  instructor: 'instructor',
  totalHours: 'totalHours',
  startDate: 'startDate',
  endDate: 'endDate',
  maxParticipants: 'maxParticipants',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentTrainingEnrollmentScalarFieldEnum = {
  id: 'id',
  trainingId: 'trainingId',
  profileId: 'profileId',
  enrollmentDate: 'enrollmentDate',
  status: 'status',
  progress: 'progress',
  completionDate: 'completionDate',
  certificateUrl: 'certificateUrl',
  attendance: 'attendance',
  grade: 'grade',
  feedback: 'feedback',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  university: 'university',
  faculty: 'faculty',
  year: 'year',
  gpa: 'gpa',
  bio: 'bio',
  location: 'location',
  phoneNumber: 'phoneNumber',
  linkedinUrl: 'linkedinUrl',
  facebookUrl: 'facebookUrl',
  githubUrl: 'githubUrl',
  portfolioUrl: 'portfolioUrl',
  profileImage: 'profileImage',
  cvPath: 'cvPath',
  attendance: 'attendance',
  totalCredits: 'totalCredits',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentSkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  profileId: 'profileId'
};

exports.Prisma.StudentBadgeScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  date: 'date',
  profileId: 'profileId'
};

exports.Prisma.StudentTrainingScalarFieldEnum = {
  id: 'id',
  title: 'title',
  category: 'category',
  level: 'level',
  instructor: 'instructor',
  hours: 'hours',
  completionDate: 'completionDate',
  startDate: 'startDate',
  status: 'status',
  progress: 'progress',
  certificate: 'certificate',
  profileId: 'profileId'
};

exports.Prisma.StudentTestimonialScalarFieldEnum = {
  id: 'id',
  author: 'author',
  role: 'role',
  content: 'content',
  rating: 'rating',
  date: 'date',
  profileId: 'profileId'
};

exports.Prisma.StudentSubjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  grade: 'grade',
  credits: 'credits',
  semester: 'semester',
  profileId: 'profileId'
};

exports.Prisma.TrainingReviewScalarFieldEnum = {
  id: 'id',
  content: 'content',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trainingId: 'trainingId',
  studentProfileId: 'studentProfileId',
  featuredStudentId: 'featuredStudentId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  CLIENT: 'CLIENT'
};

exports.TrainingType = exports.$Enums.TrainingType = {
  INFORMATION_SCIENCE: 'INFORMATION_SCIENCE',
  AGROBUSINESS: 'AGROBUSINESS',
  ACCOUNTING: 'ACCOUNTING',
  MARKETING: 'MARKETING'
};

exports.JobType = exports.$Enums.JobType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  INTERNSHIP: 'INTERNSHIP'
};

exports.TeamMemberRole = exports.$Enums.TeamMemberRole = {
  EXECUTIVE_DIRECTOR: 'EXECUTIVE_DIRECTOR',
  MEETING_COORDINATOR: 'MEETING_COORDINATOR',
  BOARD_MEMBER: 'BOARD_MEMBER',
  PRESIDENT: 'PRESIDENT'
};

exports.CourseType = exports.$Enums.CourseType = {
  INFORMATION_SCIENCE: 'INFORMATION_SCIENCE',
  AGROBUSINESS: 'AGROBUSINESS',
  ACCOUNTING: 'ACCOUNTING',
  MARKETING: 'MARKETING'
};

exports.TrainingStatus = exports.$Enums.TrainingStatus = {
  ENROLLED: 'ENROLLED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DROPPED: 'DROPPED'
};

exports.Prisma.ModelName = {
  User: 'User',
  NewsImage: 'NewsImage',
  News: 'News',
  Application: 'Application',
  JobListing: 'JobListing',
  TeamMember: 'TeamMember',
  FeaturedStudent: 'FeaturedStudent',
  Training: 'Training',
  StudentTrainingEnrollment: 'StudentTrainingEnrollment',
  StudentProfile: 'StudentProfile',
  StudentSkill: 'StudentSkill',
  StudentBadge: 'StudentBadge',
  StudentTraining: 'StudentTraining',
  StudentTestimonial: 'StudentTestimonial',
  StudentSubject: 'StudentSubject',
  TrainingReview: 'TrainingReview'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
